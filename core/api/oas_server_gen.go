// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteWebsitesID implements delete-websites-id operation.
	//
	// Delete a website.
	//
	// DELETE /websites/{hostname}
	DeleteWebsitesID(ctx context.Context, params DeleteWebsitesIDParams) (DeleteWebsitesIDRes, error)
	// GetEventPing implements get-event-ping operation.
	//
	// This is a ping endpoint to determine if the user is unique or not.
	//
	// GET /event/ping
	GetEventPing(ctx context.Context, params GetEventPingParams) (GetEventPingRes, error)
	// GetUser implements get-user operation.
	//
	// Retrieve the information of the user with the matching user ID.
	//
	// GET /user
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// GetWebsiteIDSummary implements get-website-id-summary operation.
	//
	// Get a summary of the website's stats.
	//
	// GET /website/{hostname}/summary
	GetWebsiteIDSummary(ctx context.Context, params GetWebsiteIDSummaryParams) (GetWebsiteIDSummaryRes, error)
	// GetWebsites implements get-websites operation.
	//
	// Get a list of all websites from the user.
	//
	// GET /websites
	GetWebsites(ctx context.Context, params GetWebsitesParams) (GetWebsitesRes, error)
	// GetWebsitesID implements get-websites-id operation.
	//
	// Get website details for an individual website.
	//
	// GET /websites/{hostname}
	GetWebsitesID(ctx context.Context, params GetWebsitesIDParams) (GetWebsitesIDRes, error)
	// GetWebsitesIDActive implements get-websites-id-active operation.
	//
	// Return the number of active users who triggered a pageview in the past 5 minutes.
	//
	// GET /websites/{hostname}/active
	GetWebsitesIDActive(ctx context.Context, params GetWebsitesIDActiveParams) (GetWebsitesIDActiveRes, error)
	// PatchUser implements patch-user operation.
	//
	// Update a user account's details.
	//
	// PATCH /user
	PatchUser(ctx context.Context, req OptUserPatch, params PatchUserParams) (PatchUserRes, error)
	// PatchWebsitesID implements patch-websites-id operation.
	//
	// Update a website's information.
	//
	// PATCH /websites/{hostname}
	PatchWebsitesID(ctx context.Context, req OptWebsitePatch, params PatchWebsitesIDParams) (PatchWebsitesIDRes, error)
	// PostAuthLogin implements post-auth-login operation.
	//
	// Login to the service and retrieve a session token for authentication.
	//
	// POST /auth/login
	PostAuthLogin(ctx context.Context, req OptAuthLogin) (PostAuthLoginRes, error)
	// PostEventHit implements post-event-hit operation.
	//
	// Send a hit event to register a user view.
	//
	// POST /event/hit
	PostEventHit(ctx context.Context, req OptEventHit, params PostEventHitParams) (PostEventHitRes, error)
	// PostUser implements post-user operation.
	//
	// Create a new user.
	//
	// POST /user
	PostUser(ctx context.Context, req OptUserCreate) (PostUserRes, error)
	// PostWebsites implements post-websites operation.
	//
	// Add a new website.
	//
	// POST /websites
	PostWebsites(ctx context.Context, req OptWebsiteCreate) (PostWebsitesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
