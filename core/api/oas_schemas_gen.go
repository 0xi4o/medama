// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"

	"github.com/go-faster/errors"
)

// Request body for logging in.
// Ref: #/components/schemas/AuthLogin
type AuthLogin struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *AuthLogin) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *AuthLogin) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *AuthLogin) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *AuthLogin) SetPassword(val string) {
	s.Password = val
}

type BadRequestError struct {
	Error BadRequestErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *BadRequestError) GetError() BadRequestErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *BadRequestError) SetError(val BadRequestErrorError) {
	s.Error = val
}

func (*BadRequestError) deleteUserRes()            {}
func (*BadRequestError) deleteWebsitesIDRes()      {}
func (*BadRequestError) getEventPingRes()          {}
func (*BadRequestError) getUserRes()               {}
func (*BadRequestError) getWebsiteIDBrowsersRes()  {}
func (*BadRequestError) getWebsiteIDCampaignsRes() {}
func (*BadRequestError) getWebsiteIDCountryRes()   {}
func (*BadRequestError) getWebsiteIDDeviceRes()    {}
func (*BadRequestError) getWebsiteIDLanguageRes()  {}
func (*BadRequestError) getWebsiteIDMediumsRes()   {}
func (*BadRequestError) getWebsiteIDOsRes()        {}
func (*BadRequestError) getWebsiteIDPagesRes()     {}
func (*BadRequestError) getWebsiteIDReferrersRes() {}
func (*BadRequestError) getWebsiteIDScreenRes()    {}
func (*BadRequestError) getWebsiteIDSourcesRes()   {}
func (*BadRequestError) getWebsiteIDSummaryRes()   {}
func (*BadRequestError) getWebsiteIDTimeRes()      {}
func (*BadRequestError) getWebsitesIDRes()         {}
func (*BadRequestError) getWebsitesRes()           {}
func (*BadRequestError) patchUserRes()             {}
func (*BadRequestError) patchWebsitesIDRes()       {}
func (*BadRequestError) postAuthLoginRes()         {}
func (*BadRequestError) postEventHitRes()          {}
func (*BadRequestError) postWebsitesRes()          {}

type BadRequestErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestErrorError) SetMessage(val string) {
	s.Message = val
}

type ConflictError struct {
	Error ConflictErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ConflictError) GetError() ConflictErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ConflictError) SetError(val ConflictErrorError) {
	s.Error = val
}

func (*ConflictError) deleteUserRes()   {}
func (*ConflictError) patchUserRes()    {}
func (*ConflictError) postWebsitesRes() {}

type ConflictErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictErrorError) SetMessage(val string) {
	s.Message = val
}

type CookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// DeleteUserOK is response for DeleteUser operation.
type DeleteUserOK struct{}

func (*DeleteUserOK) deleteUserRes() {}

// DeleteWebsitesIDOK is response for DeleteWebsitesID operation.
type DeleteWebsitesIDOK struct{}

func (*DeleteWebsitesIDOK) deleteWebsitesIDRes() {}

// Website hit event.
// Ref: #/components/schemas/EventHit
type EventHit struct {
	// UUID generated for each user to link multiple events on the same page together.
	B string `json:"b"`
	// Page URL including query parameters.
	U url.URL `json:"u"`
	// Referrer URL.
	R OptString `json:"r"`
	// If the user is a unique user or not.
	P bool `json:"p"`
	// Event type consisting of either 'pagehide', 'unload', 'load' or 'hidden'.
	E EventHitE `json:"e"`
	// Title of page.
	T OptString `json:"t"`
	// Timezone of the user.
	D string `json:"d"`
	// Screen width.
	W OptInt `json:"w"`
	// Screen height.
	H OptInt `json:"h"`
	// Time spent on page. Only sent on unload.
	M OptInt `json:"m"`
}

// GetB returns the value of B.
func (s *EventHit) GetB() string {
	return s.B
}

// GetU returns the value of U.
func (s *EventHit) GetU() url.URL {
	return s.U
}

// GetR returns the value of R.
func (s *EventHit) GetR() OptString {
	return s.R
}

// GetP returns the value of P.
func (s *EventHit) GetP() bool {
	return s.P
}

// GetE returns the value of E.
func (s *EventHit) GetE() EventHitE {
	return s.E
}

// GetT returns the value of T.
func (s *EventHit) GetT() OptString {
	return s.T
}

// GetD returns the value of D.
func (s *EventHit) GetD() string {
	return s.D
}

// GetW returns the value of W.
func (s *EventHit) GetW() OptInt {
	return s.W
}

// GetH returns the value of H.
func (s *EventHit) GetH() OptInt {
	return s.H
}

// GetM returns the value of M.
func (s *EventHit) GetM() OptInt {
	return s.M
}

// SetB sets the value of B.
func (s *EventHit) SetB(val string) {
	s.B = val
}

// SetU sets the value of U.
func (s *EventHit) SetU(val url.URL) {
	s.U = val
}

// SetR sets the value of R.
func (s *EventHit) SetR(val OptString) {
	s.R = val
}

// SetP sets the value of P.
func (s *EventHit) SetP(val bool) {
	s.P = val
}

// SetE sets the value of E.
func (s *EventHit) SetE(val EventHitE) {
	s.E = val
}

// SetT sets the value of T.
func (s *EventHit) SetT(val OptString) {
	s.T = val
}

// SetD sets the value of D.
func (s *EventHit) SetD(val string) {
	s.D = val
}

// SetW sets the value of W.
func (s *EventHit) SetW(val OptInt) {
	s.W = val
}

// SetH sets the value of H.
func (s *EventHit) SetH(val OptInt) {
	s.H = val
}

// SetM sets the value of M.
func (s *EventHit) SetM(val OptInt) {
	s.M = val
}

// Event type consisting of either 'pagehide', 'unload', 'load' or 'hidden'.
type EventHitE string

const (
	EventHitEPagehide EventHitE = "pagehide"
	EventHitEUnload   EventHitE = "unload"
	EventHitELoad     EventHitE = "load"
	EventHitEHidden   EventHitE = "hidden"
)

// AllValues returns all EventHitE values.
func (EventHitE) AllValues() []EventHitE {
	return []EventHitE{
		EventHitEPagehide,
		EventHitEUnload,
		EventHitELoad,
		EventHitEHidden,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventHitE) MarshalText() ([]byte, error) {
	switch s {
	case EventHitEPagehide:
		return []byte(s), nil
	case EventHitEUnload:
		return []byte(s), nil
	case EventHitELoad:
		return []byte(s), nil
	case EventHitEHidden:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventHitE) UnmarshalText(data []byte) error {
	switch EventHitE(data) {
	case EventHitEPagehide:
		*s = EventHitEPagehide
		return nil
	case EventHitEUnload:
		*s = EventHitEUnload
		return nil
	case EventHitELoad:
		*s = EventHitELoad
		return nil
	case EventHitEHidden:
		*s = EventHitEHidden
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ForbiddenError struct {
	Error ForbiddenErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ForbiddenError) GetError() ForbiddenErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ForbiddenError) SetError(val ForbiddenErrorError) {
	s.Error = val
}

func (*ForbiddenError) getWebsiteIDBrowsersRes()  {}
func (*ForbiddenError) getWebsiteIDCampaignsRes() {}
func (*ForbiddenError) getWebsiteIDCountryRes()   {}
func (*ForbiddenError) getWebsiteIDDeviceRes()    {}
func (*ForbiddenError) getWebsiteIDLanguageRes()  {}
func (*ForbiddenError) getWebsiteIDMediumsRes()   {}
func (*ForbiddenError) getWebsiteIDOsRes()        {}
func (*ForbiddenError) getWebsiteIDReferrersRes() {}
func (*ForbiddenError) getWebsiteIDScreenRes()    {}
func (*ForbiddenError) getWebsiteIDSourcesRes()   {}

type ForbiddenErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ForbiddenErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ForbiddenErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ForbiddenErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ForbiddenErrorError) SetMessage(val string) {
	s.Message = val
}

// This is set to 0 if the user is a unique user, otherwise 1.
type GetEventPingOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEventPingOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetEventPingOKHeaders wraps GetEventPingOK with response headers.
type GetEventPingOKHeaders struct {
	AccessControlAllowOrigin string
	CacheControl             string
	LastModified             string
	Response                 GetEventPingOK
}

// GetAccessControlAllowOrigin returns the value of AccessControlAllowOrigin.
func (s *GetEventPingOKHeaders) GetAccessControlAllowOrigin() string {
	return s.AccessControlAllowOrigin
}

// GetCacheControl returns the value of CacheControl.
func (s *GetEventPingOKHeaders) GetCacheControl() string {
	return s.CacheControl
}

// GetLastModified returns the value of LastModified.
func (s *GetEventPingOKHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *GetEventPingOKHeaders) GetResponse() GetEventPingOK {
	return s.Response
}

// SetAccessControlAllowOrigin sets the value of AccessControlAllowOrigin.
func (s *GetEventPingOKHeaders) SetAccessControlAllowOrigin(val string) {
	s.AccessControlAllowOrigin = val
}

// SetCacheControl sets the value of CacheControl.
func (s *GetEventPingOKHeaders) SetCacheControl(val string) {
	s.CacheControl = val
}

// SetLastModified sets the value of LastModified.
func (s *GetEventPingOKHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *GetEventPingOKHeaders) SetResponse(val GetEventPingOK) {
	s.Response = val
}

func (*GetEventPingOKHeaders) getEventPingRes() {}

type GetWebsitesOKApplicationJSON []WebsiteGet

func (*GetWebsitesOKApplicationJSON) getWebsitesRes() {}

type InternalServerError struct {
	Error InternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *InternalServerError) GetError() InternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *InternalServerError) SetError(val InternalServerErrorError) {
	s.Error = val
}

func (*InternalServerError) deleteUserRes()            {}
func (*InternalServerError) deleteWebsitesIDRes()      {}
func (*InternalServerError) getEventPingRes()          {}
func (*InternalServerError) getUserRes()               {}
func (*InternalServerError) getWebsiteIDBrowsersRes()  {}
func (*InternalServerError) getWebsiteIDCampaignsRes() {}
func (*InternalServerError) getWebsiteIDCountryRes()   {}
func (*InternalServerError) getWebsiteIDDeviceRes()    {}
func (*InternalServerError) getWebsiteIDLanguageRes()  {}
func (*InternalServerError) getWebsiteIDMediumsRes()   {}
func (*InternalServerError) getWebsiteIDOsRes()        {}
func (*InternalServerError) getWebsiteIDPagesRes()     {}
func (*InternalServerError) getWebsiteIDReferrersRes() {}
func (*InternalServerError) getWebsiteIDScreenRes()    {}
func (*InternalServerError) getWebsiteIDSourcesRes()   {}
func (*InternalServerError) getWebsiteIDSummaryRes()   {}
func (*InternalServerError) getWebsiteIDTimeRes()      {}
func (*InternalServerError) getWebsitesIDRes()         {}
func (*InternalServerError) getWebsitesRes()           {}
func (*InternalServerError) patchUserRes()             {}
func (*InternalServerError) patchWebsitesIDRes()       {}
func (*InternalServerError) postAuthLoginRes()         {}
func (*InternalServerError) postEventHitRes()          {}
func (*InternalServerError) postWebsitesRes()          {}

type InternalServerErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerErrorError) SetMessage(val string) {
	s.Message = val
}

type NotFoundError struct {
	Error NotFoundErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFoundError) GetError() NotFoundErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFoundError) SetError(val NotFoundErrorError) {
	s.Error = val
}

func (*NotFoundError) deleteUserRes()            {}
func (*NotFoundError) deleteWebsitesIDRes()      {}
func (*NotFoundError) getUserRes()               {}
func (*NotFoundError) getWebsiteIDBrowsersRes()  {}
func (*NotFoundError) getWebsiteIDCampaignsRes() {}
func (*NotFoundError) getWebsiteIDCountryRes()   {}
func (*NotFoundError) getWebsiteIDDeviceRes()    {}
func (*NotFoundError) getWebsiteIDLanguageRes()  {}
func (*NotFoundError) getWebsiteIDMediumsRes()   {}
func (*NotFoundError) getWebsiteIDOsRes()        {}
func (*NotFoundError) getWebsiteIDPagesRes()     {}
func (*NotFoundError) getWebsiteIDReferrersRes() {}
func (*NotFoundError) getWebsiteIDScreenRes()    {}
func (*NotFoundError) getWebsiteIDSourcesRes()   {}
func (*NotFoundError) getWebsiteIDSummaryRes()   {}
func (*NotFoundError) getWebsiteIDTimeRes()      {}
func (*NotFoundError) getWebsitesIDRes()         {}
func (*NotFoundError) getWebsitesRes()           {}
func (*NotFoundError) patchUserRes()             {}
func (*NotFoundError) patchWebsitesIDRes()       {}
func (*NotFoundError) postAuthLoginRes()         {}
func (*NotFoundError) postEventHitRes()          {}

type NotFoundErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundErrorError) SetMessage(val string) {
	s.Message = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPatchLanguage returns new OptUserPatchLanguage with value set to v.
func NewOptUserPatchLanguage(v UserPatchLanguage) OptUserPatchLanguage {
	return OptUserPatchLanguage{
		Value: v,
		Set:   true,
	}
}

// OptUserPatchLanguage is optional UserPatchLanguage.
type OptUserPatchLanguage struct {
	Value UserPatchLanguage
	Set   bool
}

// IsSet returns true if OptUserPatchLanguage was set.
func (o OptUserPatchLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPatchLanguage) Reset() {
	var v UserPatchLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPatchLanguage) SetTo(v UserPatchLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPatchLanguage) Get() (v UserPatchLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPatchLanguage) Or(d UserPatchLanguage) UserPatchLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PostAuthLoginOK is response for PostAuthLogin operation.
type PostAuthLoginOK struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *PostAuthLoginOK) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *PostAuthLoginOK) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*PostAuthLoginOK) postAuthLoginRes() {}

// PostEventHitNoContent is response for PostEventHit operation.
type PostEventHitNoContent struct{}

func (*PostEventHitNoContent) postEventHitRes() {}

type StatsBrowsers []StatsBrowsersItem

func (*StatsBrowsers) getWebsiteIDBrowsersRes() {}

type StatsBrowsersItem struct {
	// Browser name.
	Browser string `json:"browser"`
	// Number of unique users from browser.
	Uniques int `json:"uniques"`
	// Percentage of unique users from browser.
	UniquePercentage float32 `json:"unique_percentage"`
	// Browser version.
	Version OptString `json:"version"`
}

// GetBrowser returns the value of Browser.
func (s *StatsBrowsersItem) GetBrowser() string {
	return s.Browser
}

// GetUniques returns the value of Uniques.
func (s *StatsBrowsersItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsBrowsersItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// GetVersion returns the value of Version.
func (s *StatsBrowsersItem) GetVersion() OptString {
	return s.Version
}

// SetBrowser sets the value of Browser.
func (s *StatsBrowsersItem) SetBrowser(val string) {
	s.Browser = val
}

// SetUniques sets the value of Uniques.
func (s *StatsBrowsersItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsBrowsersItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

// SetVersion sets the value of Version.
func (s *StatsBrowsersItem) SetVersion(val OptString) {
	s.Version = val
}

type StatsCountries []StatsCountriesItem

func (*StatsCountries) getWebsiteIDCountryRes() {}

type StatsCountriesItem struct {
	// Country name.
	Country string `json:"country"`
	// Number of unique users from country.
	Uniques int `json:"uniques"`
	// Percentage of unique users from country.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetCountry returns the value of Country.
func (s *StatsCountriesItem) GetCountry() string {
	return s.Country
}

// GetUniques returns the value of Uniques.
func (s *StatsCountriesItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsCountriesItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetCountry sets the value of Country.
func (s *StatsCountriesItem) SetCountry(val string) {
	s.Country = val
}

// SetUniques sets the value of Uniques.
func (s *StatsCountriesItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsCountriesItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsDevices []StatsDevicesItem

func (*StatsDevices) getWebsiteIDDeviceRes() {}

type StatsDevicesItem struct {
	// Device name.
	Device string `json:"device"`
	// Number of unique users from device.
	Uniques int `json:"uniques"`
	// Percentage of unique users from device.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetDevice returns the value of Device.
func (s *StatsDevicesItem) GetDevice() string {
	return s.Device
}

// GetUniques returns the value of Uniques.
func (s *StatsDevicesItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsDevicesItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetDevice sets the value of Device.
func (s *StatsDevicesItem) SetDevice(val string) {
	s.Device = val
}

// SetUniques sets the value of Uniques.
func (s *StatsDevicesItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsDevicesItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsLanguages []StatsLanguagesItem

func (*StatsLanguages) getWebsiteIDLanguageRes() {}

type StatsLanguagesItem struct {
	// Language name.
	Language string `json:"language"`
	// Number of unique users from language.
	Uniques int `json:"uniques"`
	// Percentage of unique users from language.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetLanguage returns the value of Language.
func (s *StatsLanguagesItem) GetLanguage() string {
	return s.Language
}

// GetUniques returns the value of Uniques.
func (s *StatsLanguagesItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsLanguagesItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetLanguage sets the value of Language.
func (s *StatsLanguagesItem) SetLanguage(val string) {
	s.Language = val
}

// SetUniques sets the value of Uniques.
func (s *StatsLanguagesItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsLanguagesItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsOS []StatsOSItem

func (*StatsOS) getWebsiteIDOsRes() {}

type StatsOSItem struct {
	// OS name.
	Os string `json:"os"`
	// Number of unique users from OS.
	Uniques int `json:"uniques"`
	// Percentage of unique users from OS.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetOs returns the value of Os.
func (s *StatsOSItem) GetOs() string {
	return s.Os
}

// GetUniques returns the value of Uniques.
func (s *StatsOSItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsOSItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetOs sets the value of Os.
func (s *StatsOSItem) SetOs(val string) {
	s.Os = val
}

// SetUniques sets the value of Uniques.
func (s *StatsOSItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsOSItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsPages []StatsPagesItem

func (*StatsPages) getWebsiteIDPagesRes() {}

type StatsPagesItem struct {
	// Pathname of the page.
	Path string `json:"path"`
	// Title of the page.
	Title OptString `json:"title"`
	// Number of unique users.
	Uniques int `json:"uniques"`
	// Percentage of unique users.
	UniquePercentage float32 `json:"unique_percentage"`
	// Number of page views.
	Pageviews OptInt `json:"pageviews"`
	// Number of bounces.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetPath returns the value of Path.
func (s *StatsPagesItem) GetPath() string {
	return s.Path
}

// GetTitle returns the value of Title.
func (s *StatsPagesItem) GetTitle() OptString {
	return s.Title
}

// GetUniques returns the value of Uniques.
func (s *StatsPagesItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsPagesItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// GetPageviews returns the value of Pageviews.
func (s *StatsPagesItem) GetPageviews() OptInt {
	return s.Pageviews
}

// GetBounces returns the value of Bounces.
func (s *StatsPagesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsPagesItem) GetDuration() OptInt {
	return s.Duration
}

// SetPath sets the value of Path.
func (s *StatsPagesItem) SetPath(val string) {
	s.Path = val
}

// SetTitle sets the value of Title.
func (s *StatsPagesItem) SetTitle(val OptString) {
	s.Title = val
}

// SetUniques sets the value of Uniques.
func (s *StatsPagesItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsPagesItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsPagesItem) SetPageviews(val OptInt) {
	s.Pageviews = val
}

// SetBounces sets the value of Bounces.
func (s *StatsPagesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsPagesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsReferrers []StatsReferrersItem

func (*StatsReferrers) getWebsiteIDReferrersRes() {}

type StatsReferrersItem struct {
	// Referrer hostname.
	ReferrerHost string `json:"referrer_host"`
	// Referrer pathname.
	ReferrerPath OptString `json:"referrer_path"`
	// Number of unique users from referrer.
	Uniques int `json:"uniques"`
	// Percentage of unique users from referrer.
	UniquePercentage float32 `json:"unique_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetReferrerHost returns the value of ReferrerHost.
func (s *StatsReferrersItem) GetReferrerHost() string {
	return s.ReferrerHost
}

// GetReferrerPath returns the value of ReferrerPath.
func (s *StatsReferrersItem) GetReferrerPath() OptString {
	return s.ReferrerPath
}

// GetUniques returns the value of Uniques.
func (s *StatsReferrersItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsReferrersItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsReferrersItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsReferrersItem) GetDuration() OptInt {
	return s.Duration
}

// SetReferrerHost sets the value of ReferrerHost.
func (s *StatsReferrersItem) SetReferrerHost(val string) {
	s.ReferrerHost = val
}

// SetReferrerPath sets the value of ReferrerPath.
func (s *StatsReferrersItem) SetReferrerPath(val OptString) {
	s.ReferrerPath = val
}

// SetUniques sets the value of Uniques.
func (s *StatsReferrersItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsReferrersItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsReferrersItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsReferrersItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsScreens []StatsScreensItem

func (*StatsScreens) getWebsiteIDScreenRes() {}

type StatsScreensItem struct {
	// Screen size.
	Screen string `json:"screen"`
	// Number of unique users from screen size.
	Uniques int `json:"uniques"`
	// Percentage of unique users from screen size.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetScreen returns the value of Screen.
func (s *StatsScreensItem) GetScreen() string {
	return s.Screen
}

// GetUniques returns the value of Uniques.
func (s *StatsScreensItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsScreensItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetScreen sets the value of Screen.
func (s *StatsScreensItem) SetScreen(val string) {
	s.Screen = val
}

// SetUniques sets the value of Uniques.
func (s *StatsScreensItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsScreensItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

// Ref: #/components/schemas/StatsSummary
type StatsSummary struct {
	Uniques   int    `json:"uniques"`
	Pageviews int    `json:"pageviews"`
	Bounces   int    `json:"bounces"`
	Duration  int    `json:"duration"`
	Active    OptInt `json:"active"`
}

// GetUniques returns the value of Uniques.
func (s *StatsSummary) GetUniques() int {
	return s.Uniques
}

// GetPageviews returns the value of Pageviews.
func (s *StatsSummary) GetPageviews() int {
	return s.Pageviews
}

// GetBounces returns the value of Bounces.
func (s *StatsSummary) GetBounces() int {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsSummary) GetDuration() int {
	return s.Duration
}

// GetActive returns the value of Active.
func (s *StatsSummary) GetActive() OptInt {
	return s.Active
}

// SetUniques sets the value of Uniques.
func (s *StatsSummary) SetUniques(val int) {
	s.Uniques = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsSummary) SetPageviews(val int) {
	s.Pageviews = val
}

// SetBounces sets the value of Bounces.
func (s *StatsSummary) SetBounces(val int) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsSummary) SetDuration(val int) {
	s.Duration = val
}

// SetActive sets the value of Active.
func (s *StatsSummary) SetActive(val OptInt) {
	s.Active = val
}

func (*StatsSummary) getWebsiteIDSummaryRes() {}

type StatsTime []StatsTimeItem

func (*StatsTime) getWebsiteIDTimeRes() {}

type StatsTimeItem struct {
	// Pathname of the page.
	Path string `json:"path"`
	// Title of the page.
	Title OptString `json:"title"`
	// Median time spent on page in milliseconds.
	Duration int `json:"duration"`
	// Total time spent on page in milliseconds for the upper quartile (75%).
	DurationUpperQuartile OptInt `json:"duration_upper_quartile"`
	// Total time spent on page in milliseconds for the lower quartile (25%).
	DurationLowerQuartile OptInt `json:"duration_lower_quartile"`
	// Percentage of time contributing to the total time spent on the website.
	DurationPercentage float32 `json:"duration_percentage"`
	// Number of unique users.
	Uniques OptInt `json:"uniques"`
	// Number of bounces.
	Bounces OptInt `json:"bounces"`
}

// GetPath returns the value of Path.
func (s *StatsTimeItem) GetPath() string {
	return s.Path
}

// GetTitle returns the value of Title.
func (s *StatsTimeItem) GetTitle() OptString {
	return s.Title
}

// GetDuration returns the value of Duration.
func (s *StatsTimeItem) GetDuration() int {
	return s.Duration
}

// GetDurationUpperQuartile returns the value of DurationUpperQuartile.
func (s *StatsTimeItem) GetDurationUpperQuartile() OptInt {
	return s.DurationUpperQuartile
}

// GetDurationLowerQuartile returns the value of DurationLowerQuartile.
func (s *StatsTimeItem) GetDurationLowerQuartile() OptInt {
	return s.DurationLowerQuartile
}

// GetDurationPercentage returns the value of DurationPercentage.
func (s *StatsTimeItem) GetDurationPercentage() float32 {
	return s.DurationPercentage
}

// GetUniques returns the value of Uniques.
func (s *StatsTimeItem) GetUniques() OptInt {
	return s.Uniques
}

// GetBounces returns the value of Bounces.
func (s *StatsTimeItem) GetBounces() OptInt {
	return s.Bounces
}

// SetPath sets the value of Path.
func (s *StatsTimeItem) SetPath(val string) {
	s.Path = val
}

// SetTitle sets the value of Title.
func (s *StatsTimeItem) SetTitle(val OptString) {
	s.Title = val
}

// SetDuration sets the value of Duration.
func (s *StatsTimeItem) SetDuration(val int) {
	s.Duration = val
}

// SetDurationUpperQuartile sets the value of DurationUpperQuartile.
func (s *StatsTimeItem) SetDurationUpperQuartile(val OptInt) {
	s.DurationUpperQuartile = val
}

// SetDurationLowerQuartile sets the value of DurationLowerQuartile.
func (s *StatsTimeItem) SetDurationLowerQuartile(val OptInt) {
	s.DurationLowerQuartile = val
}

// SetDurationPercentage sets the value of DurationPercentage.
func (s *StatsTimeItem) SetDurationPercentage(val float32) {
	s.DurationPercentage = val
}

// SetUniques sets the value of Uniques.
func (s *StatsTimeItem) SetUniques(val OptInt) {
	s.Uniques = val
}

// SetBounces sets the value of Bounces.
func (s *StatsTimeItem) SetBounces(val OptInt) {
	s.Bounces = val
}

type StatsUTMCampaigns []StatsUTMCampaignsItem

func (*StatsUTMCampaigns) getWebsiteIDCampaignsRes() {}

type StatsUTMCampaignsItem struct {
	// UTM campaign.
	Campaign string `json:"campaign"`
	// Number of unique users from UTM campaign.
	Uniques int `json:"uniques"`
	// Percentage of unique users from UTM campaign.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetCampaign returns the value of Campaign.
func (s *StatsUTMCampaignsItem) GetCampaign() string {
	return s.Campaign
}

// GetUniques returns the value of Uniques.
func (s *StatsUTMCampaignsItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsUTMCampaignsItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetCampaign sets the value of Campaign.
func (s *StatsUTMCampaignsItem) SetCampaign(val string) {
	s.Campaign = val
}

// SetUniques sets the value of Uniques.
func (s *StatsUTMCampaignsItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsUTMCampaignsItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsUTMMediums []StatsUTMMediumsItem

func (*StatsUTMMediums) getWebsiteIDMediumsRes() {}

type StatsUTMMediumsItem struct {
	// UTM medium.
	Medium string `json:"medium"`
	// Number of unique users from UTM medium.
	Uniques int `json:"uniques"`
	// Percentage of unique users from UTM medium.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetMedium returns the value of Medium.
func (s *StatsUTMMediumsItem) GetMedium() string {
	return s.Medium
}

// GetUniques returns the value of Uniques.
func (s *StatsUTMMediumsItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsUTMMediumsItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetMedium sets the value of Medium.
func (s *StatsUTMMediumsItem) SetMedium(val string) {
	s.Medium = val
}

// SetUniques sets the value of Uniques.
func (s *StatsUTMMediumsItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsUTMMediumsItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type StatsUTMSources []StatsUTMSourcesItem

func (*StatsUTMSources) getWebsiteIDSourcesRes() {}

type StatsUTMSourcesItem struct {
	// UTM source.
	Source string `json:"source"`
	// Number of unique users from UTM source.
	Uniques int `json:"uniques"`
	// Percentage of unique users from UTM source.
	UniquePercentage float32 `json:"unique_percentage"`
}

// GetSource returns the value of Source.
func (s *StatsUTMSourcesItem) GetSource() string {
	return s.Source
}

// GetUniques returns the value of Uniques.
func (s *StatsUTMSourcesItem) GetUniques() int {
	return s.Uniques
}

// GetUniquePercentage returns the value of UniquePercentage.
func (s *StatsUTMSourcesItem) GetUniquePercentage() float32 {
	return s.UniquePercentage
}

// SetSource sets the value of Source.
func (s *StatsUTMSourcesItem) SetSource(val string) {
	s.Source = val
}

// SetUniques sets the value of Uniques.
func (s *StatsUTMSourcesItem) SetUniques(val int) {
	s.Uniques = val
}

// SetUniquePercentage sets the value of UniquePercentage.
func (s *StatsUTMSourcesItem) SetUniquePercentage(val float32) {
	s.UniquePercentage = val
}

type UnauthorisedError struct {
	Error UnauthorisedErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorisedError) GetError() UnauthorisedErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorisedError) SetError(val UnauthorisedErrorError) {
	s.Error = val
}

func (*UnauthorisedError) deleteUserRes()            {}
func (*UnauthorisedError) deleteWebsitesIDRes()      {}
func (*UnauthorisedError) getUserRes()               {}
func (*UnauthorisedError) getWebsiteIDBrowsersRes()  {}
func (*UnauthorisedError) getWebsiteIDCampaignsRes() {}
func (*UnauthorisedError) getWebsiteIDCountryRes()   {}
func (*UnauthorisedError) getWebsiteIDDeviceRes()    {}
func (*UnauthorisedError) getWebsiteIDLanguageRes()  {}
func (*UnauthorisedError) getWebsiteIDMediumsRes()   {}
func (*UnauthorisedError) getWebsiteIDOsRes()        {}
func (*UnauthorisedError) getWebsiteIDPagesRes()     {}
func (*UnauthorisedError) getWebsiteIDReferrersRes() {}
func (*UnauthorisedError) getWebsiteIDScreenRes()    {}
func (*UnauthorisedError) getWebsiteIDSourcesRes()   {}
func (*UnauthorisedError) getWebsiteIDSummaryRes()   {}
func (*UnauthorisedError) getWebsiteIDTimeRes()      {}
func (*UnauthorisedError) getWebsitesIDRes()         {}
func (*UnauthorisedError) getWebsitesRes()           {}
func (*UnauthorisedError) patchUserRes()             {}
func (*UnauthorisedError) patchWebsitesIDRes()       {}
func (*UnauthorisedError) postAuthLoginRes()         {}
func (*UnauthorisedError) postWebsitesRes()          {}

type UnauthorisedErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnauthorisedErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnauthorisedErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnauthorisedErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnauthorisedErrorError) SetMessage(val string) {
	s.Message = val
}

// Response body for getting a user.
// Ref: #/components/schemas/UserGet
type UserGet struct {
	Username    string          `json:"username"`
	Language    UserGetLanguage `json:"language"`
	DateCreated int64           `json:"dateCreated"`
	DateUpdated int64           `json:"dateUpdated"`
}

// GetUsername returns the value of Username.
func (s *UserGet) GetUsername() string {
	return s.Username
}

// GetLanguage returns the value of Language.
func (s *UserGet) GetLanguage() UserGetLanguage {
	return s.Language
}

// GetDateCreated returns the value of DateCreated.
func (s *UserGet) GetDateCreated() int64 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *UserGet) GetDateUpdated() int64 {
	return s.DateUpdated
}

// SetUsername sets the value of Username.
func (s *UserGet) SetUsername(val string) {
	s.Username = val
}

// SetLanguage sets the value of Language.
func (s *UserGet) SetLanguage(val UserGetLanguage) {
	s.Language = val
}

// SetDateCreated sets the value of DateCreated.
func (s *UserGet) SetDateCreated(val int64) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *UserGet) SetDateUpdated(val int64) {
	s.DateUpdated = val
}

func (*UserGet) getUserRes()   {}
func (*UserGet) patchUserRes() {}

type UserGetLanguage string

const (
	UserGetLanguageEn UserGetLanguage = "en"
)

// AllValues returns all UserGetLanguage values.
func (UserGetLanguage) AllValues() []UserGetLanguage {
	return []UserGetLanguage{
		UserGetLanguageEn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserGetLanguage) MarshalText() ([]byte, error) {
	switch s {
	case UserGetLanguageEn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserGetLanguage) UnmarshalText(data []byte) error {
	switch UserGetLanguage(data) {
	case UserGetLanguageEn:
		*s = UserGetLanguageEn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Request body for updating a user.
// Ref: #/components/schemas/UserPatch
type UserPatch struct {
	Username OptString            `json:"username"`
	Password OptString            `json:"password"`
	Language OptUserPatchLanguage `json:"language"`
}

// GetUsername returns the value of Username.
func (s *UserPatch) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *UserPatch) GetPassword() OptString {
	return s.Password
}

// GetLanguage returns the value of Language.
func (s *UserPatch) GetLanguage() OptUserPatchLanguage {
	return s.Language
}

// SetUsername sets the value of Username.
func (s *UserPatch) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *UserPatch) SetPassword(val OptString) {
	s.Password = val
}

// SetLanguage sets the value of Language.
func (s *UserPatch) SetLanguage(val OptUserPatchLanguage) {
	s.Language = val
}

type UserPatchLanguage string

const (
	UserPatchLanguageEn UserPatchLanguage = "en"
)

// AllValues returns all UserPatchLanguage values.
func (UserPatchLanguage) AllValues() []UserPatchLanguage {
	return []UserPatchLanguage{
		UserPatchLanguageEn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserPatchLanguage) MarshalText() ([]byte, error) {
	switch s {
	case UserPatchLanguageEn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserPatchLanguage) UnmarshalText(data []byte) error {
	switch UserPatchLanguage(data) {
	case UserPatchLanguageEn:
		*s = UserPatchLanguageEn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Request body for creating a website.
// Ref: #/components/schemas/WebsiteCreate
type WebsiteCreate struct {
	Name     string `json:"name"`
	Hostname string `json:"hostname"`
}

// GetName returns the value of Name.
func (s *WebsiteCreate) GetName() string {
	return s.Name
}

// GetHostname returns the value of Hostname.
func (s *WebsiteCreate) GetHostname() string {
	return s.Hostname
}

// SetName sets the value of Name.
func (s *WebsiteCreate) SetName(val string) {
	s.Name = val
}

// SetHostname sets the value of Hostname.
func (s *WebsiteCreate) SetHostname(val string) {
	s.Hostname = val
}

// Response body for getting a website.
// Ref: #/components/schemas/WebsiteGet
type WebsiteGet struct {
	Name     string `json:"name"`
	Hostname string `json:"hostname"`
}

// GetName returns the value of Name.
func (s *WebsiteGet) GetName() string {
	return s.Name
}

// GetHostname returns the value of Hostname.
func (s *WebsiteGet) GetHostname() string {
	return s.Hostname
}

// SetName sets the value of Name.
func (s *WebsiteGet) SetName(val string) {
	s.Name = val
}

// SetHostname sets the value of Hostname.
func (s *WebsiteGet) SetHostname(val string) {
	s.Hostname = val
}

func (*WebsiteGet) getWebsitesIDRes()   {}
func (*WebsiteGet) patchWebsitesIDRes() {}
func (*WebsiteGet) postWebsitesRes()    {}

// Request body for updating a website.
// Ref: #/components/schemas/WebsitePatch
type WebsitePatch struct {
	Name     OptString `json:"name"`
	Hostname OptString `json:"hostname"`
}

// GetName returns the value of Name.
func (s *WebsitePatch) GetName() OptString {
	return s.Name
}

// GetHostname returns the value of Hostname.
func (s *WebsitePatch) GetHostname() OptString {
	return s.Hostname
}

// SetName sets the value of Name.
func (s *WebsitePatch) SetName(val OptString) {
	s.Name = val
}

// SetHostname sets the value of Hostname.
func (s *WebsitePatch) SetHostname(val OptString) {
	s.Hostname = val
}
